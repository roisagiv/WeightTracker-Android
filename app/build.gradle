apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

ext {
    kotlinVersion = '1.3.50'
    lifecycleVersion = "2.2.0-alpha05"
    coreKtxVersion = "1.2.0-alpha04"
    coreTestingVersion = '2.1.0'
    buildToolsVersion = "29.0.0"
    compileSdkVersion = 28
    appcompatVersion = "1.1.0"
    constraintlayoutVersion = "1.1.3"
    androidxLibVersion = "1.0.0"
    robolectricVersion = "4.3"
    truthVersion = '1.0'
    coreVersion = "1.2.1-alpha01"
    extJUnitVersion = "1.1.2-alpha02"
    runnerVersion = "1.3.0-alpha02"
    espressoVersion = "3.3.0-alpha02"
    uiautomatorVersion = "2.2.0"
    retrofitVersion = "2.6.1"
    okhttpVersion = "4.2.0"
    coroutinesVersion = "1.3.1"
    timerktVersion = "1.5.1"
    koinVersion = "2.0.1"
    baristaVersion = "3.2.0"
    falconVersion = "2.1.1"
    threetenabpVersion = "1.2.1"
    spanomaticVersion = "1.0.1"
    roomVersion = "2.2.0-rc01"
    materialVersion = "1.1.0-alpha10"
    materialCalendarViewVersion = "2.0.1"
    legacyVersion = "1.0.0"
    junitVersion = "4.12"
}

android {
    compileSdkVersion project.compileSdkVersion
    buildToolsVersion project.buildToolsVersion
    defaultConfig {
        applicationId "io.roisagiv.github.weighttracker"
        minSdkVersion 23
        targetSdkVersion project.compileSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "io.roisagiv.github.weighttracker.TestRunner"

        buildConfigField "String", "AIRTABLE_URL", "\"${getFromLocalProperties('airtable.url')}\""
        buildConfigField "String", "AIRTABLE_KEY", "\"${getFromLocalProperties('airtable.key')}\""
        buildConfigField "String", "AIRTABLE_E2E_URL", "\"${getFromLocalProperties('airtable.e2e.url')}\""
        buildConfigField "String", "AIRTABLE_E2E_KEY", "\"${getFromLocalProperties('airtable.e2e.key')}\""

        if (getFromLocalProperties('E2E') == "true") {
            testInstrumentationRunnerArgument 'E2E', getFromLocalProperties('E2E')
            testInstrumentationRunnerArgument 'size', "large"
            testInstrumentationRunnerArguments clearPackageData: 'true'
        } else {
            testInstrumentationRunnerArgument 'notAnnotation', 'androidx.test.filters.LargeTest'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    testOptions {
        animationsDisabled = true
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$project.kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$project.coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$project.coroutinesVersion"

    // UI
    implementation "com.google.android.material:material:$project.materialVersion"
    implementation "androidx.constraintlayout:constraintlayout:$project.constraintlayoutVersion"
    implementation "androidx.appcompat:appcompat:$project.appcompatVersion"

    implementation "com.grivos.spanomatic:spanomatic:$project.spanomaticVersion"
    implementation "com.github.prolificinteractive:material-calendarview:$project.materialCalendarViewVersion"

    // arch
    implementation "androidx.core:core-ktx:$project.coreKtxVersion"
    implementation "androidx.arch.core:core-runtime:$project.coreTestingVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$project.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$project.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$project.lifecycleVersion"

    // Network
    implementation "com.squareup.retrofit2:retrofit:$project.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$project.retrofitVersion"
    implementation "com.squareup.okhttp3:okhttp:$project.okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$project.okhttpVersion"

    // DB
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    implementation "androidx.appcompat:appcompat:$project.appcompatVersion"
    implementation "androidx.constraintlayout:constraintlayout:$project.constraintlayoutVersion"
    kapt "androidx.room:room-compiler:$roomVersion"

    // Logging
    implementation "com.github.ajalt:timberkt:$project.timerktVersion"

    // Koin
    implementation "org.koin:koin-androidx-viewmodel:$project.koinVersion"
    implementation "androidx.legacy:legacy-support-v4:$project.legacyVersion"
    testImplementation "org.koin:koin-test:$project.koinVersion"
    androidTestImplementation "org.koin:koin-test:$project.koinVersion"

    // Dates
    implementation "com.jakewharton.threetenabp:threetenabp:$project.threetenabpVersion"

    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$project.okhttpVersion"
    androidTestImplementation "androidx.test.ext:junit:$project.extJUnitVersion"
    androidTestImplementation "androidx.test.ext:junit-ktx:$project.extJUnitVersion"
    androidTestImplementation "androidx.test:runner:$project.runnerVersion"
    androidTestUtil "androidx.test:orchestrator:$project.runnerVersion"
    androidTestImplementation "androidx.test:rules:$project.runnerVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$project.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$project.espressoVersion"
    androidTestImplementation "androidx.arch.core:core-testing:$project.coreTestingVersion"
    androidTestImplementation "com.google.truth:truth:$project.truthVersion"
    androidTestImplementation("com.schibsted.spain:barista:$project.baristaVersion") {
        exclude group: 'com.android.support'
        exclude group: 'org.jetbrains.kotlin' // Only if you already use Kotlin in your project
    }
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$project.uiautomatorVersion"

    testImplementation "junit:junit:$project.junitVersion"
    testImplementation "com.google.truth:truth:$project.truthVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$project.okhttpVersion"
}

def getFromLocalProperties(key) {
    def keysFile = file("../local.properties")
    def properties = new Properties()
    properties.load(new FileInputStream(keysFile))
    return properties[key] ?: System.getenv(key)
}

// the screenshot process: create directories, save the screens, pull them to the project output and remove all screens from device in the end
def reportsDirectory = "$buildDir/reports/androidTests/connected"
def screenshotDirectory = "/sdcard/Pictures/weight-tracker"

task copyScreenshotReport {
    // do nothing here, it will always be executed even during gradle clean, see
    // https://stackoverflow.com/questions/20737494/why-is-my-gradle-task-always-running
    // https://docs.gradle.org/current/userguide/build_lifecycle.html
    // https://proandroiddev.com/understanding-gradle-the-build-lifecycle-5118c1da613f
    doLast {
        copy {
            from "$buildDir/reports/androidTests/connected/screenshots"
            into "$buildDir/screenshots"
            println("Task copyScreenshotReport finished")
        }
    }
}

def clearScreenshotsTask = task('clearScreenshots', type: Exec) {
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'rm', '-r', screenshotDirectory
    finalizedBy {
        copyScreenshotReport
    }
}

def createScreenshotDirectoryTask = task('createScreenshotDirectory', type: Exec, group: 'reporting') {
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'mkdir', '-p', screenshotDirectory
}

def fetchScreenshotsTask = task('fetchScreenshots', type: Exec, group: 'reporting') {
    executable "${android.getAdbExe().toString()}"
    args 'pull', screenshotDirectory, reportsDirectory
    finalizedBy {
        clearScreenshotsTask
    }

    dependsOn {
        createScreenshotDirectoryTask
    }

    doFirst {
        def folder = new File(reportsDirectory)
        if (!folder.exists()) {
            folder.mkdirs()
        }
    }
}

tasks.whenTaskAdded { task ->
// this task (cAT) generates the report in output -> https://developer.android.com/studio/test/command-line
    if (task.name == 'connectedDebugAndroidTest') {
        task.finalizedBy {
            fetchScreenshotsTask
        }
    }
}
